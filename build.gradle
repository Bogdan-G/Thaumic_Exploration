buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url 'https://oss.sonatype.org/content/groups/public'
        }
        mavenLocal()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}
repositories {
    ivy {

        name 'Forge FS legacy'
        artifactPattern "http://files.minecraftforge.net/[module]/[module]-dev-[revision].[ext]"
    }

    maven {
        name 'ForgeFS'
        url 'http://files.minecraftforge.net/maven'
    }
    maven {
        name 'MinecraftS3'
        url 'http://s3.amazonaws.com/Minecraft.Download/libraries'
    }
	maven {
        name 'Thaumic Tinkerer'
        url 'http://jenkins.nekokittygames.com/maven/'
    }
    maven { // the repo from which to get NEI and stuff
        name 'CB Repo'
        url "http://chickenbones.net/maven/"
    }
    maven { // The repo from which to get waila
        name "Mobius Repo"
        url "http://mobiusstrip.eu/maven"
    }
}
apply plugin: 'forge'
sourceSets {
    main {
        sourceSets { main { output.resourcesDir = output.classesDir } }
        java {
            srcDirs = ['src/main/java']
        }
    }
}

version = "1.7.10-1.1"
if (project.hasProperty("buildnum"))
    version = "1.7.10-1.1-" + project.buildnum
if (project.hasProperty("releaseType"))
    if (project.releaseType == "ALPHA")
        version = "alpha-" + version

group = "flaxbeard.thaumicexploration" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "ThaumicExploration"

minecraft {
    version = "1.7.10-10.13.4.1448-1.7.10"
    //minecraftVersion="1.7.2"
    runDir = "eclipse/"
    replace '${version}', project.version
    //coreMod("tconstruct.preloader.TConstructLoaderContainer")
    if (project.hasProperty("pass"))
        replace "INSERTPASSWORDHERE", project.pass


}


dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"

    // real examples
    compile 'com.mod-buildcraft:buildcraft:6.0.17:dev'  // adds buildcraft to the dev env
    compile "codechicken:CodeChickenLib:1.7.10-1.1.3.138:dev"
    compile "codechicken:CodeChickenCore:1.7.10-1.0.7.46:dev"
    //compile "mcp.mobius.waila:Waila:1.5.11-RC1_1.7.10:dev"
    compile "codechicken:NotEnoughItems:1.7.10-1.0.5.110:dev"
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

processResources
        {
            // replace stuff in mcmod.info, nothing else
            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'
                // replace version and mcversion
                expand 'version': project.version, 'MCversion': project.minecraft.version
            }

            // copy everything else, thats not the mcmod.info
            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }
        }
jar {
    manifest {
        attributes 'FMLCorePlugin': 'codechicken.core.launch.DepLoader'
        attributes 'FMLCorePluginContainsFMLMod': 'true'
    }
}
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}

artifacts {
    archives deobfJar
}
